from dulwich.objects import Blob as Blob, Commit as Commit, S_ISGITLINK as S_ISGITLINK
from typing import Any, Optional

FIRST_FEW_BYTES: int

def write_commit_patch(f: Any, commit: Any, contents: Any, progress: Any, version: Optional[Any] = ..., encoding: Optional[Any] = ...) -> None: ...
def get_summary(commit: Any): ...
def unified_diff(a: Any, b: Any, fromfile: str = ..., tofile: str = ..., fromfiledate: str = ..., tofiledate: str = ..., n: int = ..., lineterm: str = ..., tree_encoding: str = ..., output_encoding: str = ...) -> None: ...
def is_binary(content: Any): ...
def shortid(hexsha: Any): ...
def patch_filename(p: Any, root: Any): ...
def write_object_diff(f: Any, store: Any, old_file: Any, new_file: Any, diff_binary: bool = ...): ...
def gen_diff_header(paths: Any, modes: Any, shas: Any) -> None: ...
def write_blob_diff(f: Any, old_file: Any, new_file: Any): ...
def write_tree_diff(f: Any, store: Any, old_tree: Any, new_tree: Any, diff_binary: bool = ...) -> None: ...
def git_am_patch_split(f: Any, encoding: Optional[Any] = ...): ...
def parse_patch_message(msg: Any, encoding: Optional[Any] = ...): ...
