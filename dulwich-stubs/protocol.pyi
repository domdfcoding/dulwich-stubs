# protocol.py -- Shared parts of the git protocols
# Copyright (C) 2008 John Carr <john.carr@unrouted.co.uk>
# Copyright (C) 2008-2012 Jelmer Vernooij <jelmer@jelmer.uk>
#
# Dulwich is dual-licensed under the Apache License, Version 2.0 and the GNU
# General Public License as public by the Free Software Foundation; version 2.0
# or (at your option) any later version. You can redistribute it and/or
# modify it under the terms of either of these two licenses.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# You should have received a copy of the licenses; if not, see
# <http://www.gnu.org/licenses/> for a copy of the GNU General Public License
# and <http://www.apache.org/licenses/LICENSE-2.0> for a copy of the Apache
# License, Version 2.0.
#

from typing import Any, IO, Iterator, List, Optional, Set, Tuple

TCP_GIT_PORT: int
ZERO_SHA: bytes
SINGLE_ACK: int
MULTI_ACK: int
MULTI_ACK_DETAILED: int
SIDE_BAND_CHANNEL_DATA: int
SIDE_BAND_CHANNEL_PROGRESS: int
SIDE_BAND_CHANNEL_FATAL: int
CAPABILITY_ATOMIC: bytes
CAPABILITY_DEEPEN_SINCE: bytes
CAPABILITY_DEEPEN_NOT: bytes
CAPABILITY_DEEPEN_RELATIVE: bytes
CAPABILITY_DELETE_REFS: bytes
CAPABILITY_INCLUDE_TAG: bytes
CAPABILITY_MULTI_ACK: bytes
CAPABILITY_MULTI_ACK_DETAILED: bytes
CAPABILITY_NO_DONE: bytes
CAPABILITY_NO_PROGRESS: bytes
CAPABILITY_OFS_DELTA: bytes
CAPABILITY_QUIET: bytes
CAPABILITY_REPORT_STATUS: bytes
CAPABILITY_SHALLOW: bytes
CAPABILITY_SIDE_BAND: bytes
CAPABILITY_SIDE_BAND_64K: bytes
CAPABILITY_THIN_PACK: bytes
CAPABILITY_AGENT: bytes
CAPABILITY_SYMREF: bytes
CAPABILITY_ALLOW_TIP_SHA1_IN_WANT: bytes
CAPABILITY_ALLOW_REACHABLE_SHA1_IN_WANT: bytes
CAPABILITIES_REF: bytes
COMMON_CAPABILITIES: List[bytes]
KNOWN_UPLOAD_CAPABILITIES: Set[bytes]
KNOWN_RECEIVE_CAPABILITIES: Set[bytes]

def agent_string() -> bytes: ...
def capability_agent() -> bytes: ...
def capability_symref(from_ref: Any, to_ref: Any) -> bytes: ...
def extract_capability_names(capabilities: Any) -> Set[Any]: ...
def parse_capability(capability: Any) -> Tuple[Any]: ...
def symref_capabilities(symrefs: Any) -> List[bytes]: ...

COMMAND_DEEPEN: bytes
COMMAND_SHALLOW: bytes
COMMAND_UNSHALLOW: bytes
COMMAND_DONE: bytes
COMMAND_WANT: bytes
COMMAND_HAVE: bytes

class ProtocolFile:
	read: Any = ...
	write: Any = ...
	def __init__(self, read: Any, write: Any) -> None: ...
	def tell(self): ...
	def close(self): ...

def format_cmd_pkt(cmd: Any, *args: Any) -> bytes: ...
def parse_cmd_pkt(line: Any) -> Tuple[Any, Any]: ...
def pkt_line(data: Any) -> bytes: ...

class Protocol:
	read: Any = ...
	write: Any = ...
	report_activity: Any = ...
	def __init__(
		self,
		read: Any,
		write: Any,
		close: Optional[Any] = ...,
		report_activity: Optional[Any] = ...,
	) -> None: ...
	def close(self) -> None: ...
	def __enter__(self): ...
	def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
	def read_pkt_line(self): ...
	def eof(self) -> bool: ...
	def unread_pkt_line(self, data: Any) -> None: ...
	def read_pkt_seq(self) -> Iterator[Any]: ...
	def write_pkt_line(self, line: Any) -> None: ...
	def write_file(self) -> IO: ...
	def write_sideband(self, channel: Any, blob: Any) -> None: ...
	def send_cmd(self, cmd: Any, *args: Any) -> None: ...
	def read_cmd(self): ...

class ReceivableProtocol(Protocol):
	def __init__(
		self,
		recv: Any,
		write: Any,
		close: Optional[Any] = ...,
		report_activity: Optional[Any] = ...,
		rbufsize: Any = ...,
	) -> None: ...
	def read(self, size: Any): ...
	def recv(self, size: Any): ...

def extract_capabilities(text: Any) -> Tuple[bytes, List[bytes]]: ...
def extract_want_line_capabilities(text: Any): ...
def ack_type(capabilities: Any) -> bytes: ...

class BufferedPktLineWriter:
	def __init__(self, write: Any, bufsize: int = ...) -> None: ...
	def write(self, data: Any) -> None: ...
	def flush(self) -> None: ...

class PktLineParser:
	handle_pkt: Any = ...
	def __init__(self, handle_pkt: Any) -> None: ...
	def parse(self, data: Any) -> None: ...
	def get_tail(self): ...
