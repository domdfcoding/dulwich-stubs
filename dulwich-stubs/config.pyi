from collections import MutableMapping, OrderedDict
from dulwich.file import GitFile as GitFile
from typing import Any, BinaryIO, Optional

SENTINAL: Any

def lower_key(key: Any): ...

class CaseInsensitiveDict(OrderedDict):
    @classmethod
    def make(cls, dict_in: Optional[Any] = ...): ...
    def __setitem__(self, key: Any, value: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, item: Any): ...
    def get(self, key: Any, default: Any = ...): ...
    def setdefault(self, key: Any, default: Any = ...): ...

class Config:
    def get(self, section: Any, name: Any) -> None: ...
    def get_boolean(self, section: Any, name: Any, default: Optional[Any] = ...): ...
    def set(self, section: Any, name: Any, value: Any) -> None: ...
    def iteritems(self, section: Any) -> None: ...
    def itersections(self) -> None: ...
    def has_section(self, name: Any): ...

class ConfigDict(Config, MutableMapping):
    encoding: Any = ...
    def __init__(self, values: Optional[Any] = ..., encoding: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any): ...
    def __delitem__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def get(self, section: Any, name: Any): ...
    def set(self, section: Any, name: Any, value: Any) -> None: ...
    def iteritems(self, section: Any): ...
    def itersections(self): ...

class ConfigFile(ConfigDict):
    path: Any = ...
    def __init__(self, values: Optional[Any] = ..., encoding: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_file(cls: Any, f: BinaryIO) -> ConfigFile: ...
    @classmethod
    def from_path(cls: Any, path: Any) -> ConfigFile: ...
    def write_to_path(self, path: Any=...) -> None: ...
    def write_to_file(self, f: BinaryIO) -> None: ...

def get_xdg_config_home_path(*path_segments: Any): ...

class StackedConfig(Config):
    backends: Any = ...
    writable: Any = ...
    def __init__(self, backends: Any, writable: Optional[Any] = ...) -> None: ...
    @classmethod
    def default(cls): ...
    @classmethod
    def default_backends(cls): ...
    def get(self, section: Any, name: Any): ...
    def set(self, section: Any, name: Any, value: Any): ...

def parse_submodules(config: Any) -> None: ...
