# __init__.py -- Fast export/import functionality
# Copyright (C) 2010-2013 Jelmer Vernooij <jelmer@jelmer.uk>
#
# Dulwich is dual-licensed under the Apache License, Version 2.0 and the GNU
# General Public License as public by the Free Software Foundation; version 2.0
# or (at your option) any later version. You can redistribute it and/or
# modify it under the terms of either of these two licenses.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# You should have received a copy of the licenses; if not, see
# <http://www.gnu.org/licenses/> for a copy of the GNU General Public License
# and <http://www.apache.org/licenses/LICENSE-2.0> for a copy of the Apache
# License, Version 2.0.
#

from fastimport import processor  # type: ignore
from typing import Any, Dict, NoReturn, Optional, Tuple, TypeVar

def split_email(text: bytes) -> Tuple[bytes, bytes]: ...

class GitFastExporter:
	outf: Any = ...
	store: Any = ...
	markers: Any = ...
	def __init__(self, outf: Any, store: Any) -> None: ...
	def print_cmd(self, cmd: Any) -> None: ...
	def emit_blob(self, blob: Any) -> Dict: ...
	def emit_commit(
            self,
            commit: Any,
            ref: Any,
            base_tree: Optional[Any] = ...,
	) -> Dict: ...

_O = TypeVar("_O", bound=Any)

class GitImportProcessor(processor.ImportProcessor):
	repo: Any = ...
	last_commit: Any = ...
	markers: Any = ...
	def __init__(
		self,
		repo: Any,
		params: Optional[Any] = ...,
		verbose: bool = ...,
		outf: Optional[Any] = ...,
	) -> None: ...
	def lookup_object(self, objectish: _O) -> _O: ...
	def import_stream(self, stream: Any) -> Dict: ...
	def blob_handler(self, cmd: Any) -> None: ...
	def checkpoint_handler(self, cmd: Any) -> None: ...
	def commit_handler(self, cmd: Any) -> None: ...
	def progress_handler(self, cmd: Any) -> None: ...
	def reset_handler(self, cmd: Any) -> None: ...
	def tag_handler(self, cmd: Any) -> None: ...
	def feature_handler(self, cmd: Any) -> NoReturn: ...
