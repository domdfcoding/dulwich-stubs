from collections import namedtuple
from dulwich.archive import tar_stream as tar_stream
from dulwich.client import get_transport_and_path as get_transport_and_path
from dulwich.config import StackedConfig as StackedConfig
from dulwich.diff_tree import CHANGE_ADD as CHANGE_ADD, CHANGE_COPY as CHANGE_COPY, CHANGE_DELETE as CHANGE_DELETE, CHANGE_MODIFY as CHANGE_MODIFY, CHANGE_RENAME as CHANGE_RENAME, RENAME_CHANGE_TYPES as RENAME_CHANGE_TYPES
from dulwich.errors import SendPackError as SendPackError
from dulwich.graph import can_fast_forward as can_fast_forward
from dulwich.ignore import IgnoreFilterManager as IgnoreFilterManager
from dulwich.index import blob_from_path_and_stat as blob_from_path_and_stat, get_unstaged_changes as get_unstaged_changes
from dulwich.object_store import tree_lookup_path as tree_lookup_path
from dulwich.objects import Commit as Commit, Tag as Tag, format_timezone as format_timezone, parse_timezone as parse_timezone, pretty_format_tree_entry as pretty_format_tree_entry
from dulwich.objectspec import parse_commit as parse_commit, parse_object as parse_object, parse_ref as parse_ref, parse_reftuples as parse_reftuples, parse_tree as parse_tree
from dulwich.pack import write_pack_index as write_pack_index, write_pack_objects as write_pack_objects
from dulwich.patch import write_tree_diff as write_tree_diff
from dulwich.protocol import Protocol as Protocol, ZERO_SHA as ZERO_SHA
from dulwich.refs import ANNOTATED_TAG_SUFFIX as ANNOTATED_TAG_SUFFIX, LOCAL_BRANCH_PREFIX as LOCAL_BRANCH_PREFIX, RefsContainer as RefsContainer, strip_peeled_refs as strip_peeled_refs
from dulwich.repo import BaseRepo as BaseRepo, Repo as Repo
from dulwich.server import FileSystemBackend as FileSystemBackend, ReceivePackHandler as ReceivePackHandler, TCPGitServer as TCPGitServer, UploadPackHandler as UploadPackHandler
from io import RawIOBase
from typing import Any, Optional, Tuple, Union

GitStatus = namedtuple('GitStatus', 'staged unstaged untracked')

class NoneStream(RawIOBase):
    def read(self, size: int = ...) -> None: ...
    def readall(self) -> None: ...
    def readinto(self, b: Any) -> None: ...
    def write(self, b: Any) -> None: ...

default_bytes_out_stream: Any
default_bytes_err_stream: Any
DEFAULT_ENCODING: str

class Error(Exception):
    inner: Any = ...
    def __init__(self, msg: Any, inner: Optional[Any] = ...) -> None: ...

class RemoteExists(Error): ...

def open_repo(path_or_repo: Any): ...
def open_repo_closing(path_or_repo: Union[str, Repo]) -> Repo: ...
def path_to_tree_path(repopath: Any, path: Any, tree_encoding: Any = ...): ...

class DivergedBranches(Error): ...

def check_diverged(repo: Any, current_sha: Any, new_sha: Any) -> None: ...
def archive(repo: Any, committish: Optional[Any] = ..., outstream: Any = ..., errstream: Any = ...) -> None: ...
def update_server_info(repo: str = ...) -> None: ...
def symbolic_ref(repo: Any, ref_name: Any, force: bool = ...) -> None: ...
def commit(repo: str = ..., message: Optional[Any] = ..., author: Optional[Any] = ..., committer: Optional[Any] = ..., encoding: Optional[Any] = ...): ...
def commit_tree(repo: Any, tree: Any, message: Optional[Any] = ..., author: Optional[Any] = ..., committer: Optional[Any] = ...): ...
def init(path: str = ..., bare: bool = ...): ...
def clone(source: Any, target: Optional[Any] = ..., bare: bool = ..., checkout: Optional[Any] = ..., errstream: Any = ..., outstream: Optional[Any] = ..., origin: bytes = ..., depth: Optional[Any] = ..., **kwargs: Any): ...
def add(repo: str = ..., paths: Optional[Any] = ...): ...
def clean(repo: str = ..., target_dir: Optional[Any] = ...) -> None: ...
def remove(repo: str = ..., paths: Optional[Any] = ..., cached: bool = ...) -> None: ...
rm = remove

def commit_decode(commit: Any, contents: Any, default_encoding: Any = ...): ...
def commit_encode(commit: Any, contents: Any, default_encoding: Any = ...): ...
def print_commit(commit: Any, decode: Any, outstream: Any = ...) -> None: ...
def print_tag(tag: Any, decode: Any, outstream: Any = ...) -> None: ...
def show_blob(repo: Any, blob: Any, decode: Any, outstream: Any = ...) -> None: ...
def show_commit(repo: Any, commit: Any, decode: Any, outstream: Any = ...) -> None: ...
def show_tree(repo: Any, tree: Any, decode: Any, outstream: Any = ...) -> None: ...
def show_tag(repo: Any, tag: Any, decode: Any, outstream: Any = ...) -> None: ...
def show_object(repo: Any, obj: Any, decode: Any, outstream: Any): ...
def print_name_status(changes: Any) -> None: ...
def log(repo: str = ..., paths: Optional[Any] = ..., outstream: Any = ..., max_entries: Optional[Any] = ..., reverse: bool = ..., name_status: bool = ...): ...
def show(repo: str = ..., objects: Optional[Any] = ..., outstream: Any = ..., default_encoding: Any = ...): ...
def diff_tree(repo: Any, old_tree: Any, new_tree: Any, outstream: Any = ...) -> None: ...
def rev_list(repo: Any, commits: Any, outstream: Any = ...) -> None: ...
def tag(*args: Any, **kwargs: Any): ...
def tag_create(repo: Any, tag: Any, author: Optional[Any] = ..., message: Optional[Any] = ..., annotated: bool = ..., objectish: str = ..., tag_time: Optional[Any] = ..., tag_timezone: Optional[Any] = ..., sign: bool = ...) -> None: ...
def list_tags(*args: Any, **kwargs: Any): ...
def tag_list(repo: Any, outstream: Any = ...): ...
def tag_delete(repo: Any, name: Any) -> None: ...
def reset(repo: Any, mode: Any, treeish: str = ...) -> None: ...
def get_remote_repo(repo: Repo, remote_location: Optional[Union[str, bytes]]=...) -> Tuple[Optional[str], str]: ...
def push(repo: Any, remote_location: Optional[Any] = ..., refspecs: Optional[Any] = ..., outstream: Any = ..., errstream: Any = ..., force: bool = ..., **kwargs: Any): ...
def pull(repo: Any, remote_location: Optional[Any] = ..., refspecs: Optional[Any] = ..., outstream: Any = ..., errstream: Any = ..., fast_forward: bool = ..., force: bool = ..., **kwargs: Any): ...
def status(repo: Union[str, Repo] = ..., ignored: bool = ...): ...
def get_untracked_paths(frompath: Any, basepath: Any, index: Any) -> None: ...
def get_tree_changes(repo: Any): ...
def daemon(path: str = ..., address: Optional[Any] = ..., port: Optional[Any] = ...) -> None: ...
def web_daemon(path: str = ..., address: Optional[Any] = ..., port: Optional[Any] = ...) -> None: ...
def upload_pack(path: str = ..., inf: Optional[Any] = ..., outf: Optional[Any] = ...): ...
def receive_pack(path: str = ..., inf: Optional[Any] = ..., outf: Optional[Any] = ...): ...
def branch_delete(repo: Any, name: Any) -> None: ...
def branch_create(repo: Any, name: Any, objectish: Optional[Any] = ..., force: bool = ...) -> None: ...
def branch_list(repo: Any): ...
def active_branch(repo: Any): ...
def get_branch_remote(repo: Any): ...
def fetch(repo: Any, remote_location: Optional[Any] = ..., outstream: Any = ..., errstream: Any = ..., message: Optional[Any] = ..., depth: Optional[Any] = ..., prune: bool = ..., prune_tags: bool = ..., force: bool = ..., **kwargs: Any): ...
def ls_remote(remote: Any, config: Optional[Any] = ..., **kwargs: Any): ...
def repack(repo: Any) -> None: ...
def pack_objects(repo: Any, object_ids: Any, packf: Any, idxf: Any, delta_window_size: Optional[Any] = ...) -> None: ...
def ls_tree(repo: Any, treeish: bytes = ..., outstream: Any = ..., recursive: bool = ..., name_only: bool = ...) -> None: ...
def remote_add(repo: Any, name: Any, url: Any) -> None: ...
def check_ignore(repo: Any, paths: Any, no_index: bool = ...) -> None: ...
def update_head(repo: Any, target: Any, detached: bool = ..., new_branch: Optional[Any] = ...) -> None: ...
def check_mailmap(repo: Any, contact: Any): ...
def fsck(repo: Any) -> None: ...
def stash_list(repo: Any): ...
def stash_push(repo: Any) -> None: ...
def stash_pop(repo: Any) -> None: ...
def ls_files(repo: Any): ...
def describe(repo: Any): ...
def get_object_by_path(repo: Any, path: Any, committish: Optional[Any] = ...): ...
def write_tree(repo: Any): ...
