from dulwich.contrib import swift as swift
from dulwich.objects import Blob as Blob, Commit as Commit, Tag as Tag, Tree as Tree, parse_timezone as parse_timezone
from dulwich.tests import TestCase as TestCase
from dulwich.tests.test_object_store import ObjectStoreTests as ObjectStoreTests
from typing import Any, Optional

missing_libs: Any
skipmsg: Any
config_file: str
def_config_file: Any

def create_swift_connector(store: Any = ...): ...

class Response:
    headers: Any = ...
    status_code: Any = ...
    content: Any = ...
    def __init__(self, headers: Any = ..., status: int = ..., content: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def items(self): ...
    def read(self): ...

def fake_auth_request_v1(*args: Any, **kwargs: Any): ...
def fake_auth_request_v1_error(*args: Any, **kwargs: Any): ...
def fake_auth_request_v2(*args: Any, **kwargs: Any): ...
def create_commit(data: Any, marker: bytes = ..., blob: Optional[Any] = ...): ...
def create_commits(length: int = ..., marker: bytes = ...): ...

class FakeSwiftConnector:
    store: Any = ...
    conf: Any = ...
    root: Any = ...
    concurrency: int = ...
    chunk_length: int = ...
    cache_length: int = ...
    def __init__(self, root: Any, conf: Any, store: Optional[Any] = ...) -> None: ...
    def put_object(self, name: Any, content: Any) -> None: ...
    def get_object(self, name: Any, range: Optional[Any] = ...): ...
    def get_container_objects(self): ...
    def create_root(self) -> None: ...
    def get_object_stat(self, name: Any): ...

class TestSwiftRepo(TestCase):
    conf: Any = ...
    def setUp(self) -> None: ...
    def test_init(self) -> None: ...
    def test_init_no_data(self) -> None: ...
    def test_init_bad_data(self) -> None: ...
    def test_put_named_file(self) -> None: ...
    def test_init_bare(self) -> None: ...

class TestSwiftInfoRefsContainer(TestCase):
    store: Any = ...
    conf: Any = ...
    fsc: Any = ...
    object_store: Any = ...
    def setUp(self) -> None: ...
    def test_init(self) -> None: ...
    def test_set_if_equals(self) -> None: ...
    def test_remove_if_equals(self) -> None: ...

class TestSwiftConnector(TestCase):
    conf: Any = ...
    conn: Any = ...
    def setUp(self) -> None: ...
    def test_init_connector(self): ...
    def test_root_exists(self): ...
    def test_root_not_exists(self): ...
    def test_create_root(self): ...
    def test_create_root_fails(self): ...
    def test_get_container_objects(self): ...
    def test_get_container_objects_fails(self): ...
    def test_get_object_stat(self): ...
    def test_get_object_stat_fails(self): ...
    def test_put_object(self): ...
    def test_put_object_fails(self): ...
    def test_get_object(self): ...
    def test_get_object_fails(self): ...
    def test_del_object(self): ...
    def test_del_root(self): ...

class SwiftObjectStoreTests(ObjectStoreTests, TestCase):
    store: Any = ...
    def setUp(self) -> None: ...
