# stdlib
from typing import Any, Optional

# this package
from dulwich.greenthreads import GreenThreadsMissingObjectFinder, GreenThreadsObjectStoreIterator
from dulwich.object_store import PackBasedObjectStore
from dulwich.pack import Pack, PackData
from dulwich.refs import InfoRefsContainer
from dulwich.repo import BaseRepo
from dulwich.server import Backend

class PackInfoObjectStoreIterator(GreenThreadsObjectStoreIterator):
	def __len__(self): ...

class PackInfoMissingObjectFinder(GreenThreadsMissingObjectFinder):
	def next(self): ...  # noqa: A003  # pylint: disable=redefined-builtin

def load_conf(path: Optional[Any] = ..., file: Optional[Any] = ...): ...
def swift_load_pack_index(scon: Any, filename: Any): ...
def pack_info_create(pack_data: Any, pack_index: Any): ...

def load_pack_info(
		filename: Any,
		scon: Optional[Any] = ...,
		file: Optional[Any] = ...,
		): ...

class SwiftException(Exception): ...

class SwiftConnector:
	conf: Any = ...
	auth_ver: Any = ...
	auth_url: Any = ...
	user: Any = ...
	password: Any = ...
	concurrency: Any = ...
	http_timeout: Any = ...
	http_pool_length: Any = ...
	region_name: Any = ...
	endpoint_type: Any = ...
	cache_length: Any = ...
	chunk_length: Any = ...
	root: Any = ...
	httpclient: Any = ...
	base_path: Any = ...

	def __init__(self, root: Any, conf: Any) -> None: ...
	def swift_auth_v1(self): ...
	def swift_auth_v2(self): ...
	def test_root_exists(self): ...
	def create_root(self) -> None: ...
	def get_container_objects(self): ...
	def get_object_stat(self, name: Any): ...
	def put_object(self, name: Any, content: Any): ...

	def get_object(
			self,
			name: Any,
			range: Optional[Any] = ...,  # noqa: A002  # pylint: disable=redefined-builtin
			): ...

	def del_object(self, name: Any) -> None: ...
	def del_root(self) -> None: ...

class SwiftPackReader:
	scon: Any = ...
	filename: Any = ...
	pack_length: Any = ...
	offset: int = ...
	base_offset: int = ...
	buff: bytes = ...
	buff_length: Any = ...

	def __init__(self, scon: Any, filename: Any, pack_length: Any) -> None: ...
	def read(self, length: Any): ...
	def seek(self, offset: Any) -> None: ...
	def read_checksum(self): ...

class SwiftPackData(PackData):
	scon: Any = ...
	pack_length: Any = ...
	pack: Any = ...

	def __init__(self, scon: Any, filename: Any) -> None: ...
	def get_object_at(self, offset: Any): ...
	def get_stored_checksum(self): ...
	def close(self) -> None: ...

class SwiftPack(Pack):
	scon: Any = ...

	def __init__(self, *args: Any, **kwargs: Any): ...

	@property
	def pack_info(self): ...

class SwiftObjectStore(PackBasedObjectStore):
	scon: Any = ...
	root: Any = ...
	pack_dir: Any = ...

	def __init__(self, scon: Any) -> None: ...
	def iter_shas(self, finder: Any): ...
	def find_missing_objects(self, *args: Any, **kwargs: Any): ...
	def pack_info_get(self, sha: Any): ...
	def add_pack(self): ...
	def add_object(self, obj: Any) -> None: ...
	def add_thin_pack(self, read_all: Any, read_some: Any): ...

class SwiftInfoRefsContainer(InfoRefsContainer):
	scon: Any = ...
	filename: str = ...
	store: Any = ...

	def __init__(self, scon: Any, store: Any) -> None: ...
	def set_if_equals(self, name: Any, old_ref: Any, new_ref: Any) -> bool: ...  # type: ignore
	def remove_if_equals(self, name: Any, old_ref: Any) -> bool: ...  # type: ignore
	def allkeys(self): ...

class SwiftRepo(BaseRepo):
	root: Any = ...
	conf: Any = ...
	scon: Any = ...
	bare: bool = ...

	def __init__(self, root: Any, conf: Any) -> None: ...

	@classmethod
	def init_bare(cls, scon: Any, conf: Any): ...

class SwiftSystemBackend(Backend):
	conf: Any = ...
	logger: Any = ...

	def __init__(self, logger: Any, conf: Any) -> None: ...
	def open_repository(self, path: Any): ...

def cmd_daemon(args: Any) -> None: ...
def cmd_init(args: Any) -> None: ...
def main(argv: Any = ...) -> None: ...
