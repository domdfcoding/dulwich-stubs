# lru_cache.py -- Simple LRU cache for dulwich
# Copyright (C) 2006, 2008 Canonical Ltd
#
# Dulwich is dual-licensed under the Apache License, Version 2.0 and the GNU
# General Public License as public by the Free Software Foundation; version 2.0
# or (at your option) any later version. You can redistribute it and/or
# modify it under the terms of either of these two licenses.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# You should have received a copy of the licenses; if not, see
# <http://www.gnu.org/licenses/> for a copy of the GNU General Public License
# and <http://www.apache.org/licenses/LICENSE-2.0> for a copy of the Apache
# License, Version 2.0.
#

# stdlib
from typing import Any, Callable, Optional


class _LRUNode:
	prev: Any = ...
	next_key: Any = ...
	key: Any = ...
	value: Any = ...
	cleanup: Any = ...
	size: Any = ...
	def __init__(self, key: Any, value: Any, cleanup: Optional[Any] = ...) -> None: ...
	def run_cleanup(self) -> None: ...

class LRUCache:
	def __init__(
		self, max_cache: int = ..., after_cleanup_count: Optional[Any] = ...
	) -> None: ...
	def __contains__(self, key: Any): ...
	def __getitem__(self, key: Any): ...
	def __len__(self): ...
	def add(
		self, key: Any, value: Any, cleanup: Optional[Callable[[Any, Any], Any]] = ...
	) -> None: ...
	def cache_size(self): ...
	def get(self, key: Any, default: Optional[Any] = ...): ...
	def keys(self): ...
	def items(self): ...
	def cleanup(self) -> None: ...
	def __setitem__(self, key: Any, value: Any) -> None: ...
	def clear(self) -> None: ...
	def resize(self, max_cache: Any, after_cleanup_count: Optional[Any] = ...) -> None: ...

class LRUSizeCache(LRUCache):
	def __init__(
		self,
		max_size: Any = ...,
		after_cleanup_size: Optional[Any] = ...,
		compute_size: Optional[Any] = ...,
	) -> None: ...
	def add(self, key: Any, value: Any, cleanup: Optional[Any] = ...) -> None: ...
	def cleanup(self) -> None: ...
	def resize(self, max_size: Any, after_cleanup_size: Optional[Any] = ...) -> None: ...
