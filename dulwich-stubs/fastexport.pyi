from dulwich.index import commit_tree as commit_tree
from dulwich.objects import Blob as Blob, Commit as Commit, Tag as Tag, ZERO_SHA as ZERO_SHA
from fastimport import processor
from typing import Any, Optional

def split_email(text: Any): ...

class GitFastExporter:
    outf: Any = ...
    store: Any = ...
    markers: Any = ...
    def __init__(self, outf: Any, store: Any) -> None: ...
    def print_cmd(self, cmd: Any) -> None: ...
    def emit_blob(self, blob: Any): ...
    def emit_commit(self, commit: Any, ref: Any, base_tree: Optional[Any] = ...): ...

class GitImportProcessor(processor.ImportProcessor):
    repo: Any = ...
    last_commit: Any = ...
    markers: Any = ...
    def __init__(self, repo: Any, params: Optional[Any] = ..., verbose: bool = ..., outf: Optional[Any] = ...) -> None: ...
    def lookup_object(self, objectish: Any): ...
    def import_stream(self, stream: Any): ...
    def blob_handler(self, cmd: Any) -> None: ...
    def checkpoint_handler(self, cmd: Any) -> None: ...
    def commit_handler(self, cmd: Any) -> None: ...
    def progress_handler(self, cmd: Any) -> None: ...
    def reset_handler(self, cmd: Any) -> None: ...
    def tag_handler(self, cmd: Any) -> None: ...
    def feature_handler(self, cmd: Any) -> None: ...
