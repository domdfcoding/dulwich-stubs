from typing import Any, Optional

class _LRUNode:
    prev: Any = ...
    next_key: Any = ...
    key: Any = ...
    value: Any = ...
    cleanup: Any = ...
    size: Any = ...
    def __init__(self, key: Any, value: Any, cleanup: Optional[Any] = ...) -> None: ...
    def run_cleanup(self) -> None: ...

class LRUCache:
    def __init__(self, max_cache: int = ..., after_cleanup_count: Optional[Any] = ...) -> None: ...
    def __contains__(self, key: Any): ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
    def add(self, key: Any, value: Any, cleanup: Optional[Any] = ...) -> None: ...
    def cache_size(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def keys(self): ...
    def items(self): ...
    def cleanup(self) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def clear(self) -> None: ...
    def resize(self, max_cache: Any, after_cleanup_count: Optional[Any] = ...) -> None: ...

class LRUSizeCache(LRUCache):
    def __init__(self, max_size: Any = ..., after_cleanup_size: Optional[Any] = ..., compute_size: Optional[Any] = ...) -> None: ...
    def add(self, key: Any, value: Any, cleanup: Optional[Any] = ...) -> None: ...
    def cleanup(self) -> None: ...
    def resize(self, max_size: Any, after_cleanup_size: Optional[Any] = ...) -> None: ...
